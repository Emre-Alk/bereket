class HandleEventJob < ApplicationJob
  queue_as :default

  def perform(event)
    # Here first filter event by 3rd party source (ie, origin like stripe, etc...),
    # to redirect event to the corresponding handler.
    case event.source
    when 'stripe'
      handle_stripe_event(event)
    end
  end

  def handle_stripe_event(event)
    stripe_event = Stripe::Event.construct_from(event.data)

    case stripe_event.type
    when 'customer.created' # test with stripe CLI
      handle_customer_created(stripe_event)
    when 'account.updated'
      handle_account_updated(stripe_event)
    when 'checkout.session.completed'
      handle_checkout_session_completed(stripe_event)
    # when 'transfer.created'
    #   handle_transfer_created(stripe_event)
    end
    # when 'capability.updated' # Useful if goal is to create/check financial account as external account
    # handle_capability_updated(stripe_event)
  end

  def handle_transfer_created
    # to finish later.
    # possible 'issue' if later change type of charge from destination to direct for instance
    # transfer = stripe_event.data.object
  end

  def handle_checkout_session_completed(stripe_event)
    # retrive checkout session
    checkout_session = Stripe::Checkout::Session.retrieve(
      {
        id: stripe_event.data.object.id,
        expand: [:line_items, 'payment_intent.payment_method']
      }
    )

    return unless checkout_session.payment_status == 'paid' # create a donation record if status is paid

    # retrieve a place_id
    place = Place.find(checkout_session.metadata.place_id)

    # retrive a donator_id
    if checkout_session.customer_creation
      # case visitor not converted yet (cus created by CS but not a user yet) || user not logged in
      email = checkout_session.customer_details.email
      name = checkout_session.customer_details.name.nil? ? 'visiteur visiteur' : checkout_session.customer_details.name

      donator = Donator.find_or_initialize_by(email:)
      # this will either:
      # 1/ find already existing enrolled donator and was not logged in
      # do nothing => updating each time his cus id of registration with the one created by CS, No added value.
      # 2/ find already existing persisted visitor donator
      # do nothing => creating a cus association and cus id would require also an updating case if comes twice. No added value
      # 3/ Or initiate a new one based on email
      # finish the initialiazed new record and persist it

      # if donator.visitor? && donator.persisted?
      # case find already existing visitor comingback for 2nd/+ time
      # retrieve his customer id so to updated with the last CS generated customer id
      # So if convert on sucess page, he will save his last donaton only based on CS id and Cus id (in the last CS)
      # donator = visitor.donator
      # customer = donator.customer
      # donator.customer.nil? ? donator.create_customer!(stripe_id: checkout_session.customer) : donator.customer.update!(stripe_id: checkout_session.customer)

      # elsif donator.enrolled?
      # case find already registered user that is not logged in
      # donator = visitor.donator
      # in contradiction to what the docs API says, CS cannot be updated
      # /!\/!\/!\
      # So the CS will generate a cus id to a registered donator with already a valid cus id
      # and donation will have a CS id referencing a wrong cus-id
      # which can be ambiguous: donator have a donation where the CS don't reference his cus-id
      # Stripe::Checkout::Session.update(
      #   checkout_session.id,
      #   { metadata: { registered_customer: donator.customer.stripe_id } }
      # )

      if !donator.persisted?
        # case initialize new visitor (1st visit)
        puts '游릲游릲游릲游릲游릲游릲游릲游릲游릲'

        donator.first_name = name.split(' ')[0].to_s
        donator.last_name = name.split(' ')[1].to_s
        donator.status = :visitor
        donator.save!

        # retrieve his customer id generated by donator creation to updated with the CS generated customer id
        # So if convert on sucess page, he will save his last donaton only based on CS id and Cus id (in the last CS)
        # customer = donator.customer
        # customer.update!(stripe_id: checkout_session.customer)
        # donator.create_customer!(stripe_id: checkout_session.customer) # only benefit is to be consistent w/ stripe dashboard
      end

      puts '游릵游릵游릵游릵游릵游릵游릵游릵游릵'
    else
      # case when donator is already registrated and donate 1st time. BC 2nd times are done by PaymentIntent.
      donator = Customer.find_by(stripe_id: checkout_session.customer).donator
      puts '游릳游릳游릳游릳游릳游릳游릳游릳游릳'
    end

    # retrive donated amount
    amount = checkout_session.amount_total
    total_fee = checkout_session.metadata.total_fee
    amount_net = amount - total_fee.to_f

    # create a donation record (donator, place, cs, amount brut, occured_on)
    Donation.create!(
      place:,
      donator:,
      amount:,
      amount_net:,
      occured_on: Date.today,
      checkout_session_id: checkout_session.id,
      mode: 'virement, pr칠l칟vement, carte bancaire'
    )

    puts '游릭游릭游릭游릭游릭游릭游릭游릭'

    # for next times, payment intent with cus id and pm id can be done.
    # however, on testing i had to create pi, then "status": "requires_confirmation".
    # so i confirmed via Stripe::PaymentIntent.confirm(), then "status": "succeeded".
    # the money is transfer and my app is paid.
    # in live mode, do i still need to confirm server-side ?
  end

  def handle_capability_updated(stripe_event)
    capability = stripe_event.data.object
    if capability.id == 'transfers' && capability.status == 'active'
      account = Account.find_by(stripe_id: capability.account)
      service = StripeAccount.new(account)
      service.ensure_external_account
    end
  end

  def handle_account_updated(stripe_event)
    stripe_account = stripe_event.data.object
    account = Account.find_by(stripe_id: stripe_account.id)

    if !stripe_account.requirements.eventually_due.empty? # if eventually_due is not empty
      requirements = 'eventually'
    elsif !stripe_account.requirements.currently_due.empty? # if currently_due is not empty
      requirements = 'currently'
    elsif !stripe_account.requirements.past_due.empty? # if past_due is not empty
      requirements = 'past'
    else
      requirements = 'clear'
    end

    account.update!(
      charges_enabled: stripe_account.charges_enabled,
      payouts_enabled: stripe_account.payouts_enabled,
      external_bank_account_id: stripe_account.details_submitted ? stripe_account.external_accounts.data.first.id : nil,
      last_four: stripe_account.details_submitted ? stripe_account.external_accounts.data.first.last4 : nil,
      requirements:,
      stripe_deadline: stripe_account.requirements.current_deadline ? Time.at(stripe_account.requirements.current_deadline).to_datetime : nil,
      status: stripe_account.requirements.disabled_reason ? 'disabled' : 'active'
    )

    # stripe_deadline = Time.at(stripe_account.requirements.current_deadline).to_datetime
    # # if eventually_due is not empty
    # account.update!(requirements: 'eventually') unless stripe_account.requirements.eventually_due.empty?

    # # if currently_due is not empty
    # account.update!(requirements: 'currently', stripe_deadline:) unless stripe_account.requirements.currently_due.empty?

    # # if past_due is not empty
    # account.update!(requirements: 'past', stripe_deadline:) unless stripe_account.requirements.past_due.empty?

    # # if account disabled
    # account.update!(status: 'disabled') unless stripe_account.requirements.disabled_reason.empty?
  end

  def handle_customer_created(stripe_event)
    puts '游릭游릭游릭游릭游릭游릭游릭游릭游릭游릭游릭'
    puts "customer created #{stripe_event.data.object.id}"
    puts '游릭游릭游릭游릭游릭游릭游릭游릭游릭游릭游릭'
  end
end
